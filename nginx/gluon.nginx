upstream gluon {
    server 127.0.0.1:8000 fail_timeout=5;
}


server {
    server_name  www.dapprank.com;
    return 301 $scheme://dapprank.com$request_uri;
}

server {
    listen      80;
    server_name dapprank.com;
    root /data/www/gluon/;

    location /robots.txt {
      access_log      off;
      log_not_found   off;
     }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://gluon;
            break;
        }
    }

    listen 443 ssl; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/dapprank.com/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/dapprank.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    } # managed by Certbot
}


server {
    listen      80;
    server_name api.dapprank.com;
    root /data/www/gluon/;

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://gluon;
            break;
        }
    }

}

server {
    listen      80;
    server_name static.dapprank.com;
    access_log off;
    log_not_found off;

    root /data/www/static;
    location /static/ {
      alias /data/www/static/;
      expires max;
    }

    listen 443 ssl; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/static.dapprank.com/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/static.dapprank.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    } # managed by Certbot
}

